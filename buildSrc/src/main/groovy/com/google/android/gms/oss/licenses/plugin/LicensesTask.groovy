/**
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Modifications copyright 2021 Anthony Marland
 */

package com.google.android.gms.oss.licenses.plugin

import groovy.json.JsonSlurper
import org.gradle.api.DefaultTask
import org.gradle.api.artifacts.component.ModuleComponentIdentifier
import org.gradle.api.artifacts.result.ResolvedArtifactResult
import org.gradle.api.internal.artifacts.DefaultModuleIdentifier
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier
import org.gradle.maven.MavenModule
import org.gradle.maven.MavenPomArtifact
import org.slf4j.LoggerFactory

// Changed Apr 11 2021: removed unused imports (resulting from being in a non-Android context)

// Changed Apr 11 2021: pluralized the word "file" in Javadoc comment
/**
 * Task to find available licenses from the artifacts stored in the json
 * file generated by DependencyTask, and then generate the third_party_licenses
 * and third_party_license_metadata files.
 */
class LicensesTask extends DefaultTask {
    private static final String UTF_8 = "UTF-8"
    private static final byte[] LINE_SEPARATOR = System
            .getProperty("line.separator").getBytes(UTF_8)
    // Changed Apr 11 2021: removed unneeded Android-specific fields

    private static final logger = LoggerFactory.getLogger(LicensesTask.class)

    protected int start = 0
    // Changed Apr 11 2021: removed unneeded Android-specific field `googleServiceLicenses`
    protected Map<String, String> licensesMap = [:]

    @InputFile
    File dependenciesJson

    @OutputDirectory
    File outputDir

    @OutputFile
    File licenses

    @OutputFile
    File licensesMetadata

    @TaskAction
    void action() {
        initOutputDir()
        initLicenseFile()
        initLicensesMetadata()

        def allDependencies = new JsonSlurper().parse(dependenciesJson)
        for (entry in allDependencies) {
            String group = entry.group
            String name = entry.name
            // Changed Apr 11 2021: removed Android-specific local variable `fileLocation`
            String version = entry.version
            // Changed Apr 11 2021: removed Android-specific local variable `artifactLocation`

            // Changed Apr 11 2021: removed if-then statement because the condition was Android-specific,
            //                      and replaced it with the body of its else statement
            addLicensesFromPom(group, name, version)
        }

        writeMetadata()
    }

    protected void initOutputDir() {
        if (!outputDir.exists()) {
            outputDir.mkdirs()
        }
    }

    protected void initLicenseFile() {
        if (licenses == null) {
            // Changed Apr 11 2021: added period to log message
            logger.error("License file is undefined.")
        }
        // Changed Apr 11 2021: added space before lambda parameter name
        licenses.newWriter().withWriter { w ->
            w << ''
        }
    }

    protected void initLicensesMetadata() {
        // Changed Apr 11 2021: added space before lambda parameter name
        licensesMetadata.newWriter().withWriter { w ->
            w << ''
        }
    }

    // Changed Apr 11 2021: removed method `isGoogleServices` because not needed in a non-Android context

    // Changed Apr 11 2021: removed method `isGranularVersion` because not needed in a non-Android context

    // Changed Apr 11 2021: removed method `isGranularVersion` because not needed in a non-Android context

    // Changed Apr 11 2021: removed method `getBytesFromInputStream` because not needed in a non-Android context

    protected void addLicensesFromPom(String group, String name, String version) {
        def pomFile = resolvePomFileArtifact(group, name, version)
        addLicensesFromPom((File) pomFile, group, name)
    }

    protected void addLicensesFromPom(File pomFile, String group, String name) {
        if (pomFile == null || !pomFile.exists()) {
            logger.error("POM file $pomFile for $group:$name does not exist.")
            return
        }

        def rootNode = new XmlSlurper().parse(pomFile)
        if (rootNode.licenses.size() == 0) {
            return
        }

        String licenseKey = "${group}:${name}"
        if (rootNode.licenses.license.size() > 1) {
            rootNode.licenses.license.each { node ->
                String nodeName = node.name
                String nodeUrl = node.url
                appendLicense("${licenseKey} ${nodeName}", nodeUrl.getBytes(UTF_8))
            }
        } else {
            String nodeUrl = rootNode.licenses.license.url
            appendLicense(licenseKey, nodeUrl.getBytes(UTF_8))
        }
    }

    private File resolvePomFileArtifact(String group, String name, String version) {
        def moduleComponentIdentifier =
                createModuleComponentIdentifier(group, name, version)
        logger.info("Resolving POM file for $moduleComponentIdentifier licenses.")
        def components = getProject().getDependencies()
                .createArtifactResolutionQuery()
                .forComponents(moduleComponentIdentifier)
                .withArtifacts(MavenModule.class, MavenPomArtifact.class)
                .execute()
        if (components.resolvedComponents.isEmpty()) {
            logger.warn("$moduleComponentIdentifier has no POM file.")
            return null
        }

        def artifacts = components.resolvedComponents[0].getArtifacts(MavenPomArtifact.class)
        if (artifacts.isEmpty()) {
            // Changed Apr 11 2021: formatted log message
            logger.error("$moduleComponentIdentifier: empty POM artifact list")
            return null
        }
        if (!(artifacts[0] instanceof ResolvedArtifactResult)) {
            // Changed Apr 11 2021: formatted log message
            logger.error("$moduleComponentIdentifier: unexpected type (${artifacts[0].class})")
            return null
        }
        return ((ResolvedArtifactResult) artifacts[0]).getFile()
    }

    protected void appendLicense(String key, byte[] content) {
        if (licensesMap.containsKey(key)) {
            return
        }

        licensesMap.put(key, "${start}:${content.length}")
        appendLicenseContent(content)
        appendLicenseContent(LINE_SEPARATOR)
    }

    protected void appendLicenseContent(byte[] content) {
        licenses.append(content)
        start += content.length
    }

    protected void writeMetadata() {
        for (entry in licensesMap) {
            licensesMetadata.append("$entry.value $entry.key", UTF_8)
            licensesMetadata.append(LINE_SEPARATOR)
        }
    }

    private static ModuleComponentIdentifier createModuleComponentIdentifier(String group, String name, String version) {
        return new DefaultModuleComponentIdentifier(DefaultModuleIdentifier.newId(group, name), version)
    }

}
